{"version":3,"sources":["index.ts"],"names":["NativeModules","Platform","LINKING_ERROR","select","ios","default","DynamicAppIcon","Proxy","get","Error","ON_ACTIVITY_PAUSED","ON_ACTIVITY_STOPPED","ON_ACTIVITY_DESTROYED","getConstants","WhenToKillOldClasses","changeIcon","iconName","extraParams","changeIconNative","OS","customPackageName","whenToKillOldClasses","error"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,cAAxC;AAEA,MAAMC,aAAa,GAChB,8EAAD,GACAD,QAAQ,CAACE,MAAT,CAAgB;AAAEC,EAAAA,GAAG,EAAE,gCAAP;AAAyCC,EAAAA,OAAO,EAAE;AAAlD,CAAhB,CADA,GAEA,sDAFA,GAGA,6CAJF;AAWA,MAAMC,cAAc,GAAGN,aAAa,CAACM,cAAd,GACnBN,aAAa,CAACM,cADK,GAEnB,IAAIC,KAAJ,CACE,EADF,EAEE;AACEC,EAAAA,GAAG,GAAG;AACJ,UAAM,IAAIC,KAAJ,CAAUP,aAAV,CAAN;AACD;;AAHH,CAFF,CAFJ;AAWA,MAAM;AAAEQ,EAAAA,kBAAF;AAAsBC,EAAAA,mBAAtB;AAA2CC,EAAAA;AAA3C,IACJN,cAAc,CAACO,YAAf,EADF;AAGA,MAAMC,oBAAoB,GAAG;AAC3BJ,EAAAA,kBAD2B;AAE3BC,EAAAA,mBAF2B;AAG3BC,EAAAA;AAH2B,CAA7B;AAMA,SAASE,oBAAT;AACA,OAAO,eAAeC,UAAf,CACLC,QADK,EAELC,WAFK,EAGY;AACjB,MAAI;AACF,QAAIC,gBAAJ;;AACA,QAAIjB,QAAQ,CAACkB,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAM;AAAEC,QAAAA,iBAAiB,GAAG,EAAtB;AAA0BC,QAAAA,oBAAoB,GAAG;AAAjD,UACJJ,WAAW,IAAI;AAAEG,QAAAA,iBAAiB,EAAE,EAArB;AAAyBC,QAAAA,oBAAoB,EAAE;AAA/C,OADjB;AAEAH,MAAAA,gBAAgB,GAAG,MAAMZ,cAAc,CAACS,UAAf,CAA0BC,QAA1B,EAAoC;AAC3DI,QAAAA,iBAD2D;AAE3DC,QAAAA;AAF2D,OAApC,CAAzB;AAID,KAPD,MAOO;AACLH,MAAAA,gBAAgB,GAAG,MAAMZ,cAAc,CAACS,UAAf,CAA0BC,QAA1B,CAAzB;AACD;;AACD,WAAOE,gBAAP;AACD,GAbD,CAaE,OAAOI,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'rn-dynamic-app-icon' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nexport type ChangeIconExtraParams = {\n  customPackageName?: string;\n  whenToKillOldClasses?: string;\n};\n\nconst DynamicAppIcon = NativeModules.DynamicAppIcon\n  ? NativeModules.DynamicAppIcon\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nconst { ON_ACTIVITY_PAUSED, ON_ACTIVITY_STOPPED, ON_ACTIVITY_DESTROYED } =\n  DynamicAppIcon.getConstants();\n\nconst WhenToKillOldClasses = {\n  ON_ACTIVITY_PAUSED,\n  ON_ACTIVITY_STOPPED,\n  ON_ACTIVITY_DESTROYED,\n};\n\nexport { WhenToKillOldClasses };\nexport async function changeIcon(\n  iconName: string,\n  extraParams?: ChangeIconExtraParams\n): Promise<number> {\n  try {\n    let changeIconNative;\n    if (Platform.OS === 'android') {\n      const { customPackageName = '', whenToKillOldClasses = '' } =\n        extraParams || { customPackageName: '', whenToKillOldClasses: '' };\n      changeIconNative = await DynamicAppIcon.changeIcon(iconName, {\n        customPackageName,\n        whenToKillOldClasses,\n      });\n    } else {\n      changeIconNative = await DynamicAppIcon.changeIcon(iconName);\n    }\n    return changeIconNative;\n  } catch (error) {\n    throw error;\n  }\n}\n"]}